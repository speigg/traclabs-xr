{"id":"lib/SpatialLayout.ts","dependencies":[{"name":"/Users/gheric/GitHub/traclabs-xr/tsconfig.json","includedInParent":true,"mtime":1576121226497},{"name":"/Users/gheric/GitHub/traclabs-xr/package.json","includedInParent":true,"mtime":1576126026138}],"generated":{"js":"\"use strict\"; // import * as THREE from 'three'\n// import { SpatialLayoutTransitioner } from './SpatialLayoutTransitioner'\n// import { SpatialMetrics } from './SpatialMetrics'\n// import { matrices, vectors, V_111 } from './SpatialUtils'\n// declare module 'three/src/core/Object3D' {\n//     interface Object3D {\n//         layout: SpatialLayout\n//         updateWorldMatrix(updateParents:boolean, updateChildren:boolean, applyLayout?:boolean) : void\n//     }\n// }\n// // modify updateMatrixWorld to rely on updateWorldMatrix method\n// THREE.Object3D.prototype.updateMatrixWorld = function(force) {\n//     this.updateWorldMatrix(false, true, true)\n// }\n// // modify Object3D.updateWorldMatrix to apply layout\n// THREE.Object3D.prototype.updateWorldMatrix = function(updateParents:boolean, updateChildren:boolean, applyLayout:boolean=updateChildren) {\n//     const layout = this.layout\n//     if ( applyLayout ) layout.invalidateBounds()\n//     const parent = this.parent;\n//     if ( updateParents === true && parent !== null ) {\n//         parent.updateWorldMatrix( true, false, false );\n//     }\n//     if ( applyLayout && this.matrixAutoUpdate ) this.updateMatrix();\n//     if ( this.parent === null ) {\n//         this.matrixWorld.copy( this.matrix );\n//     } else {\n//         this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n//     }\n//     // update children\n//     if ( updateChildren === true ) {\n//         var children = this.children;\n//         for ( var i = 0, l = children.length; i < l; i ++ ) {\n//             children[ i ].updateWorldMatrix( false, true, applyLayout );\n//         }\n//     }\n//     if (!applyLayout) return\n//     SpatialLayout.apply(this)\n// }\n// // create a SpatialLayout instance on first access of the `layout` property \n// Object.defineProperty(THREE.Object3D.prototype, 'layout', {\n//     get: function getLayout(this:THREE.Object3D) {\n//         if (this === THREE.Object3D.prototype) return undefined\n//         Object.defineProperty(this, 'layout', {\n//             value: new SpatialLayout(this),\n//             writable: true,\n//             enumerable: true\n//         })\n//         return this.layout\n//     }\n// })\n// export const SpatialLayoutFit = {\n//     contain: 'contain',\n//     contain3d: 'contain3d',\n//     cover: 'cover',\n//     cover3d: 'cover3d',\n//     fill: 'fill',\n//     fill3d: 'fill3d',\n// }\n// export type SpatialLayoutFitType = keyof typeof SpatialLayoutFit\n// export type SpatialLayoutX = number|'center'|'left'|'right'\n// export type SpatialLayoutY = number|'center'|'top'|'bottom'\n// export type SpatialLayoutZ = number|'center'|'front'|'back'\n// /**\n//  * Extend THREE.Object3D functionality with 3D layout functionality.\n//  * \n//  * Features include:\n//  *  - automatic bounds computation\n//  *  - modify alignment, origin, and size with respect to bounds and parent bounds\n//  *  - pose & layout transitions\n//  */\n// export class SpatialLayout {\n//     /**\n//      * When active, enables pose (position, quaternion, scale) \n//      * and layout (align, origin, size) properties to be used \n//      * as transition targets for smooth linear interpolation.\n//      */\n//     transitioner : SpatialLayoutTransitioner\n//     /**\n//      * Force local layout bounds to be excluded from the parent bounding context \n//      * (effectively, forces a new bounding context)\n//      */\n//     forceBoundsExclusion = false\n//     /**\n//      * Specifies the anchor with respect to the `parentBounds`\n//      * \n//      * Parent Center is (0,0,0)\n//      * Parent Left is (-1,0,0)\n//      * Parent Top-Right is (1,1,0)\n//      * Parent Front is (0,0,1)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     align = new THREE.Vector3().set(NaN,NaN,NaN)\n//     /**\n//      * Specifies the anchor with respect to local `bounds`.  \n//      * \n//      * Center is (0,0,0)\n//      * Left is (-1,0,0)\n//      * Top-Right is (1,1,0)\n//      * Front-Center is (0,0,1)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     anchor = new THREE.Vector3().set(NaN,NaN,NaN)\n//     /**\n//      * Specifies the center of rotation/scaling with respect to local `bounds`.  \n//      * This behaves similarly to transform-origin in CSS. \n//      * \n//      * Center is (0,0,0)\n//      * Left is (-1,0,0)\n//      * Top-Right is (1,1,0)\n//      * Front-Center is (0,0,1)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     origin = new THREE.Vector3().set(NaN,NaN,NaN)\n//     /**\n//      * Specifies the maximum layout size with respect to `parentBounds`\n//      * \n//      * Same size as parent is (1, 1, 1)\n//      * Half size as parent is (0.5, 0.5, 0.5)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     size = new THREE.Vector3().set(NaN,NaN,NaN)\n//     /** \n//      * Specifies how layout should fit within the the available `size`,\n//      * with respect to the aspect ratios of local `bounds` and `parentBounds`\n//     */\n//     set fit(fit:SpatialLayoutFitType) {\n//         this._fit = fit\n//         for (const id in this.fitTargets) this.fitTargets[id as SpatialLayoutFitType] = 0\n//         this.fitTargets[fit] = 1\n//     }\n//     get fit() {\n//         return this._fit\n//     }\n//     private _fit = 'contain' as SpatialLayoutFitType\n//     /** Used internally. */\n//     fitTargets = {\n//         contain: 1,\n//         contain3d: 0,\n//         cover: 0,\n//         cover3d: 0,\n//         fill: 0,\n//         fill3d: 0,\n//     }\n//     /**\n//      * Specifies the desired parent coordinate system.\n//      * This is only useful when the transitioner is active (`update()` is being called each frame).\n//      */\n//     targetParent? : THREE.Object3D\n//     /**\n//      * Specifies the degree to which the layout properties (`align`, `anchor`, `origin`, and `size`) influence \n//      * the final transform. At 0, the layout properties have no effect. At 1, they have\n//      * their full intended effect. \n//      */\n//     weight = 1\n//     computedAlignPosition = new THREE.Vector3(0,0,0)\n//     computedAnchorPosition = new THREE.Vector3(0,0,0) \n//     computedOriginPosition = new THREE.Vector3(0,0,0) \n//     computedSizeScale = new THREE.Vector3(1,1,1)\n//     boundsAutoUpdate = true\n//     minBounds = new THREE.Box3\n//     get bounds() {\n//         if (!this.boundsAutoUpdate) return this._bounds\n//         return SpatialLayout.updateBounds(this.object)\n//     }\n//     get parentBounds() {\n//         return SpatialLayout.updateParentBounds(this.object)\n//     }\n//     private _boundsValid = false\n//     private _bounds = new THREE.Box3\n//     private _parentBounds = new THREE.Box3\n//     constructor(public object:THREE.Object3D) {\n//         this.transitioner =  new SpatialLayoutTransitioner(object)\n//         this._bounds.objectFilter = SpatialMetrics.objectFilter\n//         this._parentBounds.objectFilter = SpatialMetrics.objectFilter\n//         this.minBounds.min.setScalar(0)\n//         this.minBounds.max.setScalar(0)\n//     }\n//     invalidateBounds() {\n//         this._boundsValid = false\n//     }\n//     noop(){\n//         this.align.setScalar(NaN)\n//         this.anchor.setScalar(NaN)\n//         this.origin.setScalar(NaN)\n//         this.size.setScalar(NaN)\n//     }\n//     reset() {\n//         this.object.position.setScalar(0)\n//         this.object.quaternion.set(0,0,0,1)\n//         this.object.scale.setScalar(1)\n//         this.align.setScalar(NaN)\n//         this.anchor.setScalar(NaN)\n//         this.origin.setScalar(NaN)\n//         this.size.setScalar(NaN)\n//         this.fit = 'contain'\n//         return this\n//     }\n//     setTargetParent(targetParent:THREE.Object3D) {\n//         this.targetParent = targetParent\n//         return this\n//     }\n//     setAlign(x:SpatialLayoutX, y:SpatialLayoutY, z:SpatialLayoutZ) {\n//         SpatialLayout._setXYZ(this.align, x,y,z)\n//         return this\n//     }\n//     setAnchor(x:SpatialLayoutX, y:SpatialLayoutY, z:SpatialLayoutZ) {\n//         SpatialLayout._setXYZ(this.anchor, x,y,z)\n//         return this\n//     }\n//     setOrigin(x:SpatialLayoutX, y:SpatialLayoutY, z:SpatialLayoutZ) {\n//         SpatialLayout._setXYZ(this.origin, x,y,z)\n//         return this\n//     }\n//     setFit(fit:SpatialLayoutFitType) {\n//         this.fit = fit\n//         return this\n//     }\n//     /**\n//      * Set the `size` property. \n//      * If 'auto' is specified for a given dimension, then that dimension \n//      * will be scaled by the average resulting scale of other two dimensions. \n//      * \n//      * By specifiesing size in only one dimension, with the other two set to 'auto', \n//      * the original aspect ratio will be maintained. \n//      * \n//      * @param x \n//      * @param y \n//      * @param z \n//      */\n//     setSize(x:number, y:number, z:number) { //x:number|'auto', y:number|'auto', z:number|'auto') : this {\n//         this.size.set(x,y,z)\n//         // const isAutoX = x === 'auto'\n//         // const isAutoY = y === 'auto'\n//         // const isAutoZ = z === 'auto'\n//         // const autoCount = +isAutoX + +isAutoY + +isAutoZ\n//         // // if all dimensions are numerical, set size directly\n//         // if (autoCount === 0) {\n//         //     this.size.set(x as number, y as number, z as number)\n//         //     return this\n//         // }\n//         // // if all dimensions are set to `auto`, assume size to fit\n//         // if (autoCount === 3) {\n//         //     return this.setSizeToFit('contain3d')\n//         // }\n//         // // if any dimension is not 'auto', we need to maintain aspect ratio in that dimension\n//         // // by scaling by the average resulting scale of other specified dimensions\n//         // // ensure we have the right parent\n//         // this._setParent()\n//         // // first calculate the size scale adjustment as if NaN was passed for 'auto' \n//         // this.size.set(isAutoX ? NaN : x as number, isAutoY ? NaN : y as number,isAutoZ ? NaN : z as number)\n//         // const sizeScale = SpatialLayout.getScaleForSize(this.bounds, this.parentBounds, this.size, vectors.get())\n//         // // then compute the average of non-auto (non-NaN) scales\n//         // const averageSizeScale = (\n//         //     (isAutoX ? 0 : sizeScale.x) + \n//         //     (isAutoY ? 0 : sizeScale.y) + \n//         //     (isAutoZ ? 0 : sizeScale.z)\n//         // ) / (3 - autoCount) // dividend should never be 0 because of the autoCount === 3 gaurd above\n//         // sizeScale.x = isAutoX ? averageSizeScale : sizeScale.x\n//         // sizeScale.y = isAutoY ? averageSizeScale : sizeScale.y\n//         // sizeScale.z = isAutoZ ? averageSizeScale : sizeScale.z\n//         // // finally, convert the size scale back to a fully numerical size value\n//         // SpatialLayout.getSizeForScale(this.bounds, this.parentBounds, sizeScale, this.size)\n//         return this\n//     }\n//     // /**\n//     //  * Modify the `size` property such that it fits within the parent bounds\n//     //  * @param fit \n//     //  */\n//     // setSizeToFit(fit = 'contain' as SpatialLayoutFitType) : this {\n//     //     if (!SpatialLayoutFit[fit]) throw new Error(`Unknown fit type: ${fit}`)\n//     //     if (fit === 'fill') {\n//     //         return this.setSize(1,1,'auto')\n//     //     }\n//     //     if (fit === 'fill3d') {\n//     //         return this.setSize(1,1,1)\n//     //     }\n//     //     this._setParent()\n//     //     const parentSize = this.parentBounds.getSize(vectors.get())\n//     //     const boundsSize = this.bounds.getSize(vectors.get())\n//     //     const ratio = vectors.get().copy(boundsSize).divide(parentSize)\n//     //     if (fit === 'contain') {\n//     //         if (ratio.x > ratio.y) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         }\n//     //     }\n//     //     if (fit === 'cover') {\n//     //         if (ratio.x < ratio.y) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         }\n//     //     }\n//     //     if (fit === 'contain3d') {\n//     //         if (ratio.x > ratio.y && ratio.x > ratio.z) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else if (ratio.y > ratio.x && ratio.y > ratio.z) {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 'auto', 1)\n//     //         }\n//     //     }\n//     //     if (fit === 'cover3d') {\n//     //         if (ratio.x < ratio.y && ratio.x < ratio.z) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else if (ratio.y < ratio.x && ratio.y < ratio.z) {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 'auto', 1)\n//     //         }\n//     //     }\n//     //     vectors.poolAll()\n//     //     return this\n//     // }\n//     /**\n//      * Activate the transitioner, which linearly interpolates the pose & layout of the Object3D instance.\n//      * \n//      * When the transitioner is active, the object's pose properties (`position`, `quaternion`, and `scale`)\n//      * and layout properties (`layout.align`, `layout.origin`, `layout.size`, and `layout.weight`) are treated as \n//      * transition targets (these no longer reflect the current state). As long as the transitioner is active, \n//      * the `update()` method is expected to be called each frame, and the current pose/layout state is maintained\n//      * in the transitioner instance (`layout.transitioner.position`, `layout.transitioner.align`, etc.). \n//      * \n//      * If `targetParent` is set and differs from the current `object.parent`, \n//      * this method will smoothly switch to the new coordinate system. \n//      */\n//     update(lerpFactor:number) {\n//         this.transitioner.active = true\n//         this._setParent()\n//         this.transitioner.lerp(lerpFactor)\n//     }\n//     /**\n//      * If true, the layout properties are effectively noop\n//      */\n//     isPassive() {\n//         return isNaN(this.align.x) && isNaN(this.align.y) && isNaN(this.align.z) &&\n//             isNaN(this.anchor.x) && isNaN(this.anchor.y) && isNaN(this.anchor.z) &&  \n//             isNaN(this.origin.x) && isNaN(this.origin.y) && isNaN(this.origin.z) &&  \n//             isNaN(this.size.x) && isNaN(this.size.y) && isNaN(this.size.z)\n//     }\n//     /**\n//      * If true, the `object` should not be included in the bounding calculation\n//      * for any parent layouts.\n//      */\n//     isBoundingContext() {\n//         if (this.forceBoundsExclusion) return true\n//         if (!this.isPassive()) {\n//             this.forceBoundsExclusion = true\n//             return true\n//         }\n//         return false\n//     }\n//     /**\n//      * Ensure that this `object` is attached to the `targetParent` Object3D instance. \n//      * When the `transitioner` is active, this method ensures a smooth transition \n//      * to another coordinate system. If the `object` is already attached to the \n//      * `targetParent`, this method is effectively noop.\n//      */\n//     private _setParent(setChildren = true) {\n//         const parent = this.targetParent\n//         const o = this.object\n//         if (!parent) return\n//         if (o.parent !== parent) {\n//             o.updateWorldMatrix(true, true)\n//             const originalMatrixWorld = matrices.get().copy(o.matrixWorld)\n//             o.parent && o.parent.remove(o)\n//             parent && parent.add(o)\n//             parent.updateWorldMatrix(true, true)\n//             const inverseParentMatrixWorld = parent ? matrices.get().getInverse(parent.matrixWorld) : matrices.get().identity()\n//             o.matrix.copy(inverseParentMatrixWorld.multiply(originalMatrixWorld))\n//             const transitioner = o.layout.transitioner\n//             if (transitioner.active) {\n//                 transitioner.layoutWeight = 0\n//                 o.matrix.decompose(transitioner.position, transitioner.quaternion, transitioner.scale)\n//                 transitioner.align.setScalar(NaN)\n//                 transitioner.anchor.setScalar(NaN)\n//                 transitioner.origin.setScalar(NaN)\n//                 transitioner.size.setScalar(NaN)\n//                 for (const i in transitioner.fitTargets) transitioner.fitTargets[i as SpatialLayoutFitType] = 0\n//                 transitioner.fitTargets.contain = 1\n//             } else {\n//                 o.matrix.decompose(o.position, o.quaternion, o.scale)\n//             }\n//             matrices.poolAll()\n//         }\n//     }\n//     /**\n//      * Apply the layout to matrix and matrixWorld. Used internally. \n//      */\n//     static apply(o:THREE.Object3D) {\n//         const layout = o.layout\n//         if (layout.isBoundingContext()) {\n//             const parent = o.parent\n//             const {bounds: computedBounds, parentBounds: computedParentBounds} = layout\n//             const transitionerActive = layout.transitioner.active\n//             const {position, quaternion, scale} = transitionerActive ? layout.transitioner : o\n//             const {align, anchor, origin, size} = transitionerActive ? layout.transitioner : layout\n//             const fitTargets = transitionerActive ? layout.transitioner.fitTargets : layout.fitTargets\n//             const weight = transitionerActive ? layout.transitioner.layoutWeight : layout.weight\n//             // update computed size scale\n//             const sizeScale = SpatialLayout.getScaleForSize(computedBounds, computedParentBounds, size, layout.computedSizeScale).lerp(V_111, 1-weight)\n//             SpatialLayout.adjustScaleForFit(fitTargets, sizeScale)\n//             const layoutScale = vectors.get().copy(scale).multiply(sizeScale)\n//             // update computed align & anchor positions\n//             const alignPosition = computedParentBounds.relativeToAbsolute(align, layout.computedAlignPosition)\n//             alignPosition.multiplyScalar(weight)\n//             const anchorPosition = computedBounds.relativeToAbsolute(anchor, layout.computedAnchorPosition)\n//             anchorPosition.multiply(layoutScale).multiplyScalar(weight)\n//             // apply computed align & anchor positions to local matrix\n//             const layoutPosition = vectors.get().copy(position).add(alignPosition).sub(anchorPosition)\n//             o.matrix.compose(layoutPosition, quaternion, layoutScale)\n//             // apply transform origin for rotation/scaling \n//             const originPosition = computedBounds.relativeToAbsolute(origin, layout.computedOriginPosition)\n//             if (originPosition.x !== 0 || originPosition.y !== 0 || originPosition.z !== 0) {\n//                 const scaledOriginPosition = vectors.get().copy(originPosition).multiply(layoutScale)\n//                 const originMatrix = matrices.get().setPosition(scaledOriginPosition)\n//                 o.matrix.multiplyMatrices(originMatrix, o.matrix)\n//                 originMatrix.setPosition(originPosition).getInverse(originMatrix)\n//                 o.matrix.multiplyMatrices(o.matrix, originMatrix)\n//                 matrices.pool(originMatrix)\n//             }\n//             // update matrix world\n//             parent ? o.matrixWorld.multiplyMatrices( parent.matrixWorld, o.matrix ) : o.matrixWorld.copy(o.matrix)\n//             // update child world positions without recalculating layout\n//             const children = o.children\n//             for ( var i = 0, l = o.children.length; i < l; i ++ ) {\n//                 children[ i ].updateWorldMatrix( false, true, false )\n//             }\n//             vectors.poolAll()\n//         } else {\n//             layout.computedAlignPosition.setScalar(0)\n//             layout.computedAnchorPosition.setScalar(0)\n//             layout.computedOriginPosition.setScalar(0)\n//             layout.computedSizeScale.setScalar(1)\n//         }\n//     }\n//     private static _setXYZ(vector:THREE.Vector3, x:SpatialLayoutX,y:SpatialLayoutY,z:SpatialLayoutZ) {\n//         if (typeof x === 'string') {\n//             if (x === 'left') x = -1\n//             if (x === 'center') x = 0\n//             if (x === 'right') x = 1\n//         }\n//         if (typeof y === 'string') {\n//             if (y === 'bottom') y = -1\n//             if (y === 'center') y = 0\n//             if (y === 'top') y = 1\n//         }\n//         if (typeof z === 'string') {\n//             if (z === 'back') z = -1\n//             if (z === 'center') z = 0\n//             if (z === 'front') z = 1\n//         }\n//         vector.set(x,y,z)\n//     }\n//     public static updateBounds(o:THREE.Object3D) {\n//         const layout = o.layout\n//         const bounds = layout._bounds\n//         if (layout._boundsValid) return bounds\n//         layout._boundsValid = true\n//         const {minBounds} = layout.transitioner.active ? layout.transitioner : layout\n//         return SpatialMetrics.get(o).getBoundsOf(o, bounds).union(minBounds)\n//     }\n//     public static updateParentBounds(o:THREE.Object3D) {\n//         const layout = o.layout\n//         const parentBounds = layout._parentBounds\n//         const parent = o.parent\n//         const cameraParent = parent as THREE.Camera\n//         if (cameraParent && cameraParent.isCamera) {\n//             const positionZ = layout.transitioner.active ? layout.transitioner.position.z : o.position.z \n//             const projectionMatrixInverse = matrices.get().getInverse(cameraParent.projectionMatrix)\n//             const near = parentBounds.min.set(0,0,-1).applyMatrix4(projectionMatrixInverse).z\n//             const far = parentBounds.min.set(0,0,1).applyMatrix4(projectionMatrixInverse).z\n//             const projectionZ = parentBounds.min.set(0,0,positionZ).applyMatrix4(cameraParent.projectionMatrix).z\n//             parentBounds.min.set(-1, -1, projectionZ)\n//             parentBounds.max.set(1, 1, projectionZ)\n//             parentBounds.min.applyMatrix4(projectionMatrixInverse)\n//             parentBounds.max.applyMatrix4(projectionMatrixInverse)\n//             parentBounds.min.z = far\n//             parentBounds.max.z = near\n//             matrices.pool(projectionMatrixInverse)\n//         } else if (parent) {\n//             parentBounds.copy(parent.layout.bounds)\n//         } else {\n//             parentBounds.makeEmpty()\n//         }\n//         return parentBounds\n//     }\n//     private static _boundsSize = new THREE.Vector3\n//     private static _parentSize = new THREE.Vector3\n//     public static getScaleForSize(bounds:THREE.Box3, parentBounds:THREE.Box3, size:THREE.Vector3, out:THREE.Vector3) {\n//         const boundsSize = bounds.getSize(this._boundsSize)\n//         const parentSize = parentBounds.getSize(this._parentSize)\n//         out.copy(parentSize).multiply(size).divide(boundsSize)\n//         // if 0, set scale very close to 0 so matrix transforms remain valid\n//         if (out.x === 0) out.x = 1e-10\n//         if (out.y === 0) out.y = 1e-10\n//         if (out.z === 0) out.z = 1e-10\n//         // if any dimenion is not defined, set it close to 0\n//         if (!isFinite(out.x)) out.x = 1e-10\n//         if (!isFinite(out.y)) out.y = 1e-10\n//         if (!isFinite(out.z)) out.z = 1e-10\n//         // if any size dimension was NaN, leave it unscaled (set to 1)\n//         if (isNaN(size.x)) out.x = 1\n//         if (isNaN(size.y)) out.y = 1\n//         if (isNaN(size.z)) out.z = 1\n//         return out\n//     }\n//     public static getSizeForScale(bounds:THREE.Box3, parentBounds:THREE.Box3, scale:THREE.Vector3, out:THREE.Vector3) {\n//         const boundsSize = bounds.getSize(this._boundsSize)\n//         const parentSize = parentBounds.getSize(this._parentSize)\n//         out.copy(scale).multiply(boundsSize).divide(parentSize)\n//         // if 0, set scale very close to 0 so matrix transforms remain valid\n//         if (out.x === 0) out.x = 1e-10\n//         if (out.y === 0) out.y = 1e-10\n//         if (out.z === 0) out.z = 1e-10\n//         // if any dimenion is not defined, set it close to 0\n//         if (!isFinite(out.x)) out.x = 1e-10\n//         if (!isFinite(out.y)) out.y = 1e-10\n//         if (!isFinite(out.z)) out.z = 1e-10\n//         return out\n//     }\n//     public static _fitScale = new THREE.Vector3\n//     public static adjustScaleForFit(fitTargets:typeof SpatialLayout.prototype.fitTargets, sizeScale:THREE.Vector3) {\n//         const {x,y,z} = sizeScale\n//         const fitScale = this._fitScale\n//         // fill3d: allow all dimensions to fill layout size\n//         if (fitTargets.fill3d) {\n//             // no-op\n//         }\n//         // fill (2D): set z to average of x and y\n//         if (fitTargets.fill) {\n//             fitScale.set(x, y, x + y / 2)\n//             sizeScale.lerp(fitScale, fitTargets.fill)\n//         }\n//         // contain (2D): set all dimensions to smallest of x or y\n//         if (fitTargets.contain) {\n//             if (x < y) {\n//                 fitScale.set(x, x, x)\n//             } else {\n//                 fitScale.set(y, y, y)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.contain)\n//         }\n//         // contain3d: set all dimensions to smallest of x or y or z\n//         if (fitTargets.contain3d) {\n//             if (x < y && x < z) {\n//                 fitScale.set(x, x, x)\n//             } else if (y < x && y < z) {\n//                 fitScale.set(y, y, y)\n//             } else {\n//                 fitScale.set(z, z, z)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.contain3d)\n//         }\n//         // cover (2D): set all dimensions to largest of x or y\n//         if (fitTargets.cover) {\n//             if (x > y) {\n//                 fitScale.set(x, x, x)\n//             } else {\n//                 fitScale.set(y, y, y)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.cover)\n//         }\n//         // cover (3D): set all dimensions to largest of x or y or z\n//         if (fitTargets.cover3d) {\n//             if (x > y && x > z) {\n//                 fitScale.set(x, x, x)\n//             } else if (y > x && y > z) {\n//                 fitScale.set(y, y, y)\n//             } else {\n//                 fitScale.set(z, z, z)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.cover3d)\n//         }\n//     }\n// }\n// function isNaN(a:number) {\n//     return a !== a\n// }"},"sourceMaps":{"js":{"mappings":[{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":1,"column":14}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":5,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":6,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":7,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":8,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":10,"column":0},"generated":{"line":9,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":10,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":11,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":12,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":13,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":14,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":15,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":16,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":17,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":18,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":25,"column":0},"generated":{"line":19,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":20,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":21,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":31,"column":0},"generated":{"line":22,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":33,"column":0},"generated":{"line":23,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":35,"column":0},"generated":{"line":24,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":25,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":26,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":41,"column":0},"generated":{"line":27,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":43,"column":0},"generated":{"line":28,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":29,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":47,"column":0},"generated":{"line":30,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":31,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":32,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":53,"column":0},"generated":{"line":33,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":34,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":35,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":36,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":61,"column":0},"generated":{"line":37,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":38,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":39,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":40,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":41,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":42,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":43,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":44,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":70,"column":0},"generated":{"line":45,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":71,"column":0},"generated":{"line":46,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":47,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":48,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":74,"column":0},"generated":{"line":49,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":75,"column":0},"generated":{"line":50,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":77,"column":0},"generated":{"line":51,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":52,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":79,"column":0},"generated":{"line":53,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":80,"column":0},"generated":{"line":54,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":81,"column":0},"generated":{"line":55,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":56,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":83,"column":0},"generated":{"line":57,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":84,"column":0},"generated":{"line":58,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":85,"column":0},"generated":{"line":59,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":88,"column":0},"generated":{"line":60,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":89,"column":0},"generated":{"line":61,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":90,"column":0},"generated":{"line":62,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":92,"column":0},"generated":{"line":63,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":64,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":94,"column":0},"generated":{"line":65,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":95,"column":0},"generated":{"line":66,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":67,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":97,"column":0},"generated":{"line":68,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":98,"column":0},"generated":{"line":69,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":99,"column":0},"generated":{"line":70,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":100,"column":0},"generated":{"line":71,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":102,"column":0},"generated":{"line":72,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":103,"column":0},"generated":{"line":73,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":104,"column":0},"generated":{"line":74,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":75,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":106,"column":0},"generated":{"line":76,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":107,"column":0},"generated":{"line":77,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":109,"column":0},"generated":{"line":78,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":110,"column":0},"generated":{"line":79,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":111,"column":0},"generated":{"line":80,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":112,"column":0},"generated":{"line":81,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":82,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":115,"column":0},"generated":{"line":83,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":84,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":117,"column":0},"generated":{"line":85,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":118,"column":0},"generated":{"line":86,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":87,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":88,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":121,"column":0},"generated":{"line":89,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":122,"column":0},"generated":{"line":90,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":123,"column":0},"generated":{"line":91,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":124,"column":0},"generated":{"line":92,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":125,"column":0},"generated":{"line":93,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":127,"column":0},"generated":{"line":94,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":128,"column":0},"generated":{"line":95,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":129,"column":0},"generated":{"line":96,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":130,"column":0},"generated":{"line":97,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":131,"column":0},"generated":{"line":98,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":132,"column":0},"generated":{"line":99,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":133,"column":0},"generated":{"line":100,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":134,"column":0},"generated":{"line":101,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":135,"column":0},"generated":{"line":102,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":136,"column":0},"generated":{"line":103,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":137,"column":0},"generated":{"line":104,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":139,"column":0},"generated":{"line":105,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":140,"column":0},"generated":{"line":106,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":141,"column":0},"generated":{"line":107,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":142,"column":0},"generated":{"line":108,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":143,"column":0},"generated":{"line":109,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":110,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":145,"column":0},"generated":{"line":111,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":146,"column":0},"generated":{"line":112,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":147,"column":0},"generated":{"line":113,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":148,"column":0},"generated":{"line":114,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":149,"column":0},"generated":{"line":115,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":150,"column":0},"generated":{"line":116,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":117,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":153,"column":0},"generated":{"line":118,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":119,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":155,"column":0},"generated":{"line":120,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":156,"column":0},"generated":{"line":121,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":157,"column":0},"generated":{"line":122,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":158,"column":0},"generated":{"line":123,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":159,"column":0},"generated":{"line":124,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":160,"column":0},"generated":{"line":125,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":162,"column":0},"generated":{"line":126,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":163,"column":0},"generated":{"line":127,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":164,"column":0},"generated":{"line":128,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":165,"column":0},"generated":{"line":129,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":166,"column":0},"generated":{"line":130,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":167,"column":0},"generated":{"line":131,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":168,"column":0},"generated":{"line":132,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":169,"column":0},"generated":{"line":133,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":170,"column":0},"generated":{"line":134,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":171,"column":0},"generated":{"line":135,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":172,"column":0},"generated":{"line":136,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":173,"column":0},"generated":{"line":137,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":174,"column":0},"generated":{"line":138,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":176,"column":0},"generated":{"line":139,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":177,"column":0},"generated":{"line":140,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":178,"column":0},"generated":{"line":141,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":179,"column":0},"generated":{"line":142,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":180,"column":0},"generated":{"line":143,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":181,"column":0},"generated":{"line":144,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":182,"column":0},"generated":{"line":145,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":183,"column":0},"generated":{"line":146,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":184,"column":0},"generated":{"line":147,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":186,"column":0},"generated":{"line":148,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":187,"column":0},"generated":{"line":149,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":188,"column":0},"generated":{"line":150,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":189,"column":0},"generated":{"line":151,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":190,"column":0},"generated":{"line":152,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":192,"column":0},"generated":{"line":153,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":193,"column":0},"generated":{"line":154,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":194,"column":0},"generated":{"line":155,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":195,"column":0},"generated":{"line":156,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":196,"column":0},"generated":{"line":157,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":197,"column":0},"generated":{"line":158,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":199,"column":0},"generated":{"line":159,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":200,"column":0},"generated":{"line":160,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":201,"column":0},"generated":{"line":161,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":202,"column":0},"generated":{"line":162,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":204,"column":0},"generated":{"line":163,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":205,"column":0},"generated":{"line":164,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":207,"column":0},"generated":{"line":165,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":208,"column":0},"generated":{"line":166,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":209,"column":0},"generated":{"line":167,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":210,"column":0},"generated":{"line":168,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":212,"column":0},"generated":{"line":169,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":213,"column":0},"generated":{"line":170,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":214,"column":0},"generated":{"line":171,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":216,"column":0},"generated":{"line":172,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":217,"column":0},"generated":{"line":173,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":218,"column":0},"generated":{"line":174,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":220,"column":0},"generated":{"line":175,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":221,"column":0},"generated":{"line":176,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":222,"column":0},"generated":{"line":177,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":223,"column":0},"generated":{"line":178,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":224,"column":0},"generated":{"line":179,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":225,"column":0},"generated":{"line":180,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":226,"column":0},"generated":{"line":181,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":228,"column":0},"generated":{"line":182,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":229,"column":0},"generated":{"line":183,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":230,"column":0},"generated":{"line":184,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":232,"column":0},"generated":{"line":185,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":233,"column":0},"generated":{"line":186,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":234,"column":0},"generated":{"line":187,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":235,"column":0},"generated":{"line":188,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":236,"column":0},"generated":{"line":189,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":237,"column":0},"generated":{"line":190,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":239,"column":0},"generated":{"line":191,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":240,"column":0},"generated":{"line":192,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":241,"column":0},"generated":{"line":193,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":242,"column":0},"generated":{"line":194,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":243,"column":0},"generated":{"line":195,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":244,"column":0},"generated":{"line":196,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":245,"column":0},"generated":{"line":197,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":246,"column":0},"generated":{"line":198,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":247,"column":0},"generated":{"line":199,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":248,"column":0},"generated":{"line":200,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":249,"column":0},"generated":{"line":201,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":251,"column":0},"generated":{"line":202,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":252,"column":0},"generated":{"line":203,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":253,"column":0},"generated":{"line":204,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":254,"column":0},"generated":{"line":205,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":256,"column":0},"generated":{"line":206,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":257,"column":0},"generated":{"line":207,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":258,"column":0},"generated":{"line":208,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":259,"column":0},"generated":{"line":209,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":261,"column":0},"generated":{"line":210,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":262,"column":0},"generated":{"line":211,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":263,"column":0},"generated":{"line":212,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":264,"column":0},"generated":{"line":213,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":266,"column":0},"generated":{"line":214,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":267,"column":0},"generated":{"line":215,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":268,"column":0},"generated":{"line":216,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":269,"column":0},"generated":{"line":217,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":271,"column":0},"generated":{"line":218,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":272,"column":0},"generated":{"line":219,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":273,"column":0},"generated":{"line":220,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":274,"column":0},"generated":{"line":221,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":276,"column":0},"generated":{"line":222,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":277,"column":0},"generated":{"line":223,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":278,"column":0},"generated":{"line":224,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":279,"column":0},"generated":{"line":225,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":280,"column":0},"generated":{"line":226,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":281,"column":0},"generated":{"line":227,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":282,"column":0},"generated":{"line":228,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":283,"column":0},"generated":{"line":229,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":284,"column":0},"generated":{"line":230,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":285,"column":0},"generated":{"line":231,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":286,"column":0},"generated":{"line":232,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":287,"column":0},"generated":{"line":233,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":288,"column":0},"generated":{"line":234,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":289,"column":0},"generated":{"line":235,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":291,"column":0},"generated":{"line":236,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":292,"column":0},"generated":{"line":237,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":293,"column":0},"generated":{"line":238,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":294,"column":0},"generated":{"line":239,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":296,"column":0},"generated":{"line":240,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":297,"column":0},"generated":{"line":241,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":298,"column":0},"generated":{"line":242,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":299,"column":0},"generated":{"line":243,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":300,"column":0},"generated":{"line":244,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":302,"column":0},"generated":{"line":245,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":303,"column":0},"generated":{"line":246,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":304,"column":0},"generated":{"line":247,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":305,"column":0},"generated":{"line":248,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":307,"column":0},"generated":{"line":249,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":308,"column":0},"generated":{"line":250,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":310,"column":0},"generated":{"line":251,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":311,"column":0},"generated":{"line":252,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":313,"column":0},"generated":{"line":253,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":314,"column":0},"generated":{"line":254,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":315,"column":0},"generated":{"line":255,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":317,"column":0},"generated":{"line":256,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":318,"column":0},"generated":{"line":257,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":319,"column":0},"generated":{"line":258,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":320,"column":0},"generated":{"line":259,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":321,"column":0},"generated":{"line":260,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":322,"column":0},"generated":{"line":261,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":323,"column":0},"generated":{"line":262,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":324,"column":0},"generated":{"line":263,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":325,"column":0},"generated":{"line":264,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":327,"column":0},"generated":{"line":265,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":328,"column":0},"generated":{"line":266,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":330,"column":0},"generated":{"line":267,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":331,"column":0},"generated":{"line":268,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":333,"column":0},"generated":{"line":269,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":334,"column":0},"generated":{"line":270,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":335,"column":0},"generated":{"line":271,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":336,"column":0},"generated":{"line":272,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":337,"column":0},"generated":{"line":273,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":339,"column":0},"generated":{"line":274,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":341,"column":0},"generated":{"line":275,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":342,"column":0},"generated":{"line":276,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":343,"column":0},"generated":{"line":277,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":345,"column":0},"generated":{"line":278,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":346,"column":0},"generated":{"line":279,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":347,"column":0},"generated":{"line":280,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":349,"column":0},"generated":{"line":281,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":350,"column":0},"generated":{"line":282,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":351,"column":0},"generated":{"line":283,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":352,"column":0},"generated":{"line":284,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":354,"column":0},"generated":{"line":285,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":355,"column":0},"generated":{"line":286,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":356,"column":0},"generated":{"line":287,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":357,"column":0},"generated":{"line":288,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":358,"column":0},"generated":{"line":289,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":359,"column":0},"generated":{"line":290,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":360,"column":0},"generated":{"line":291,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":362,"column":0},"generated":{"line":292,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":363,"column":0},"generated":{"line":293,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":364,"column":0},"generated":{"line":294,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":365,"column":0},"generated":{"line":295,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":366,"column":0},"generated":{"line":296,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":367,"column":0},"generated":{"line":297,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":368,"column":0},"generated":{"line":298,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":370,"column":0},"generated":{"line":299,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":371,"column":0},"generated":{"line":300,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":372,"column":0},"generated":{"line":301,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":373,"column":0},"generated":{"line":302,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":374,"column":0},"generated":{"line":303,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":375,"column":0},"generated":{"line":304,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":376,"column":0},"generated":{"line":305,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":377,"column":0},"generated":{"line":306,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":378,"column":0},"generated":{"line":307,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":380,"column":0},"generated":{"line":308,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":381,"column":0},"generated":{"line":309,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":382,"column":0},"generated":{"line":310,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":383,"column":0},"generated":{"line":311,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":384,"column":0},"generated":{"line":312,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":385,"column":0},"generated":{"line":313,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":386,"column":0},"generated":{"line":314,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":387,"column":0},"generated":{"line":315,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":388,"column":0},"generated":{"line":316,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":390,"column":0},"generated":{"line":317,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":392,"column":0},"generated":{"line":318,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":393,"column":0},"generated":{"line":319,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":395,"column":0},"generated":{"line":320,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":396,"column":0},"generated":{"line":321,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":397,"column":0},"generated":{"line":322,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":398,"column":0},"generated":{"line":323,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":399,"column":0},"generated":{"line":324,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":400,"column":0},"generated":{"line":325,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":401,"column":0},"generated":{"line":326,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":402,"column":0},"generated":{"line":327,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":403,"column":0},"generated":{"line":328,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":404,"column":0},"generated":{"line":329,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":405,"column":0},"generated":{"line":330,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":406,"column":0},"generated":{"line":331,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":407,"column":0},"generated":{"line":332,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":408,"column":0},"generated":{"line":333,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":409,"column":0},"generated":{"line":334,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":410,"column":0},"generated":{"line":335,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":411,"column":0},"generated":{"line":336,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":413,"column":0},"generated":{"line":337,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":414,"column":0},"generated":{"line":338,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":415,"column":0},"generated":{"line":339,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":416,"column":0},"generated":{"line":340,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":417,"column":0},"generated":{"line":341,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":418,"column":0},"generated":{"line":342,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":419,"column":0},"generated":{"line":343,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":420,"column":0},"generated":{"line":344,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":421,"column":0},"generated":{"line":345,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":423,"column":0},"generated":{"line":346,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":424,"column":0},"generated":{"line":347,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":425,"column":0},"generated":{"line":348,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":426,"column":0},"generated":{"line":349,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":427,"column":0},"generated":{"line":350,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":428,"column":0},"generated":{"line":351,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":429,"column":0},"generated":{"line":352,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":430,"column":0},"generated":{"line":353,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":431,"column":0},"generated":{"line":354,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":432,"column":0},"generated":{"line":355,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":433,"column":0},"generated":{"line":356,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":434,"column":0},"generated":{"line":357,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":436,"column":0},"generated":{"line":358,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":437,"column":0},"generated":{"line":359,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":438,"column":0},"generated":{"line":360,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":439,"column":0},"generated":{"line":361,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":440,"column":0},"generated":{"line":362,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":441,"column":0},"generated":{"line":363,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":442,"column":0},"generated":{"line":364,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":443,"column":0},"generated":{"line":365,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":444,"column":0},"generated":{"line":366,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":445,"column":0},"generated":{"line":367,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":446,"column":0},"generated":{"line":368,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":447,"column":0},"generated":{"line":369,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":448,"column":0},"generated":{"line":370,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":449,"column":0},"generated":{"line":371,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":450,"column":0},"generated":{"line":372,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":451,"column":0},"generated":{"line":373,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":452,"column":0},"generated":{"line":374,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":453,"column":0},"generated":{"line":375,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":454,"column":0},"generated":{"line":376,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":455,"column":0},"generated":{"line":377,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":456,"column":0},"generated":{"line":378,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":457,"column":0},"generated":{"line":379,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":458,"column":0},"generated":{"line":380,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":459,"column":0},"generated":{"line":381,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":460,"column":0},"generated":{"line":382,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":461,"column":0},"generated":{"line":383,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":462,"column":0},"generated":{"line":384,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":463,"column":0},"generated":{"line":385,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":464,"column":0},"generated":{"line":386,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":465,"column":0},"generated":{"line":387,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":466,"column":0},"generated":{"line":388,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":467,"column":0},"generated":{"line":389,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":468,"column":0},"generated":{"line":390,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":469,"column":0},"generated":{"line":391,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":471,"column":0},"generated":{"line":392,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":472,"column":0},"generated":{"line":393,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":473,"column":0},"generated":{"line":394,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":474,"column":0},"generated":{"line":395,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":475,"column":0},"generated":{"line":396,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":477,"column":0},"generated":{"line":397,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":479,"column":0},"generated":{"line":398,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":480,"column":0},"generated":{"line":399,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":481,"column":0},"generated":{"line":400,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":482,"column":0},"generated":{"line":401,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":483,"column":0},"generated":{"line":402,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":484,"column":0},"generated":{"line":403,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":485,"column":0},"generated":{"line":404,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":486,"column":0},"generated":{"line":405,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":487,"column":0},"generated":{"line":406,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":488,"column":0},"generated":{"line":407,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":489,"column":0},"generated":{"line":408,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":490,"column":0},"generated":{"line":409,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":491,"column":0},"generated":{"line":410,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":492,"column":0},"generated":{"line":411,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":493,"column":0},"generated":{"line":412,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":494,"column":0},"generated":{"line":413,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":495,"column":0},"generated":{"line":414,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":496,"column":0},"generated":{"line":415,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":497,"column":0},"generated":{"line":416,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":498,"column":0},"generated":{"line":417,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":499,"column":0},"generated":{"line":418,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":500,"column":0},"generated":{"line":419,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":501,"column":0},"generated":{"line":420,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":502,"column":0},"generated":{"line":421,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":503,"column":0},"generated":{"line":422,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":504,"column":0},"generated":{"line":423,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":505,"column":0},"generated":{"line":424,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":506,"column":0},"generated":{"line":425,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":507,"column":0},"generated":{"line":426,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":508,"column":0},"generated":{"line":427,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":509,"column":0},"generated":{"line":428,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":510,"column":0},"generated":{"line":429,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":511,"column":0},"generated":{"line":430,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":512,"column":0},"generated":{"line":431,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":513,"column":0},"generated":{"line":432,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":514,"column":0},"generated":{"line":433,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":515,"column":0},"generated":{"line":434,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":517,"column":0},"generated":{"line":435,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":519,"column":0},"generated":{"line":436,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":520,"column":0},"generated":{"line":437,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":521,"column":0},"generated":{"line":438,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":522,"column":0},"generated":{"line":439,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":524,"column":0},"generated":{"line":440,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":525,"column":0},"generated":{"line":441,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":527,"column":0},"generated":{"line":442,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":528,"column":0},"generated":{"line":443,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":529,"column":0},"generated":{"line":444,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":530,"column":0},"generated":{"line":445,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":531,"column":0},"generated":{"line":446,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":532,"column":0},"generated":{"line":447,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":533,"column":0},"generated":{"line":448,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":534,"column":0},"generated":{"line":449,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":535,"column":0},"generated":{"line":450,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":536,"column":0},"generated":{"line":451,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":537,"column":0},"generated":{"line":452,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":538,"column":0},"generated":{"line":453,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":539,"column":0},"generated":{"line":454,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":540,"column":0},"generated":{"line":455,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":541,"column":0},"generated":{"line":456,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":542,"column":0},"generated":{"line":457,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":543,"column":0},"generated":{"line":458,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":544,"column":0},"generated":{"line":459,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":546,"column":0},"generated":{"line":460,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":547,"column":0},"generated":{"line":461,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":548,"column":0},"generated":{"line":462,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":549,"column":0},"generated":{"line":463,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":550,"column":0},"generated":{"line":464,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":551,"column":0},"generated":{"line":465,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":552,"column":0},"generated":{"line":466,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":553,"column":0},"generated":{"line":467,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":555,"column":0},"generated":{"line":468,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":556,"column":0},"generated":{"line":469,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":557,"column":0},"generated":{"line":470,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":558,"column":0},"generated":{"line":471,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":559,"column":0},"generated":{"line":472,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":560,"column":0},"generated":{"line":473,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":561,"column":0},"generated":{"line":474,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":562,"column":0},"generated":{"line":475,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":563,"column":0},"generated":{"line":476,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":564,"column":0},"generated":{"line":477,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":565,"column":0},"generated":{"line":478,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":566,"column":0},"generated":{"line":479,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":567,"column":0},"generated":{"line":480,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":568,"column":0},"generated":{"line":481,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":569,"column":0},"generated":{"line":482,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":570,"column":0},"generated":{"line":483,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":571,"column":0},"generated":{"line":484,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":572,"column":0},"generated":{"line":485,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":573,"column":0},"generated":{"line":486,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":574,"column":0},"generated":{"line":487,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":575,"column":0},"generated":{"line":488,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":576,"column":0},"generated":{"line":489,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":577,"column":0},"generated":{"line":490,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":578,"column":0},"generated":{"line":491,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":579,"column":0},"generated":{"line":492,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":581,"column":0},"generated":{"line":493,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":582,"column":0},"generated":{"line":494,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":584,"column":0},"generated":{"line":495,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":585,"column":0},"generated":{"line":496,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":586,"column":0},"generated":{"line":497,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":587,"column":0},"generated":{"line":498,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":588,"column":0},"generated":{"line":499,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":589,"column":0},"generated":{"line":500,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":590,"column":0},"generated":{"line":501,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":591,"column":0},"generated":{"line":502,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":592,"column":0},"generated":{"line":503,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":593,"column":0},"generated":{"line":504,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":594,"column":0},"generated":{"line":505,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":595,"column":0},"generated":{"line":506,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":596,"column":0},"generated":{"line":507,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":597,"column":0},"generated":{"line":508,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":598,"column":0},"generated":{"line":509,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":599,"column":0},"generated":{"line":510,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":600,"column":0},"generated":{"line":511,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":601,"column":0},"generated":{"line":512,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":603,"column":0},"generated":{"line":513,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":604,"column":0},"generated":{"line":514,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":605,"column":0},"generated":{"line":515,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":606,"column":0},"generated":{"line":516,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":607,"column":0},"generated":{"line":517,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":608,"column":0},"generated":{"line":518,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":609,"column":0},"generated":{"line":519,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":610,"column":0},"generated":{"line":520,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":611,"column":0},"generated":{"line":521,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":612,"column":0},"generated":{"line":522,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":613,"column":0},"generated":{"line":523,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":614,"column":0},"generated":{"line":524,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":615,"column":0},"generated":{"line":525,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":616,"column":0},"generated":{"line":526,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":618,"column":0},"generated":{"line":527,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":619,"column":0},"generated":{"line":528,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":620,"column":0},"generated":{"line":529,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":621,"column":0},"generated":{"line":530,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":623,"column":0},"generated":{"line":531,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":624,"column":0},"generated":{"line":532,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":625,"column":0},"generated":{"line":533,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":626,"column":0},"generated":{"line":534,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":628,"column":0},"generated":{"line":535,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":629,"column":0},"generated":{"line":536,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":630,"column":0},"generated":{"line":537,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":631,"column":0},"generated":{"line":538,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":632,"column":0},"generated":{"line":539,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":634,"column":0},"generated":{"line":540,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":635,"column":0},"generated":{"line":541,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":636,"column":0},"generated":{"line":542,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":637,"column":0},"generated":{"line":543,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":638,"column":0},"generated":{"line":544,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":639,"column":0},"generated":{"line":545,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":640,"column":0},"generated":{"line":546,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":641,"column":0},"generated":{"line":547,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":642,"column":0},"generated":{"line":548,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":644,"column":0},"generated":{"line":549,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":645,"column":0},"generated":{"line":550,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":646,"column":0},"generated":{"line":551,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":647,"column":0},"generated":{"line":552,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":648,"column":0},"generated":{"line":553,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":649,"column":0},"generated":{"line":554,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":650,"column":0},"generated":{"line":555,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":651,"column":0},"generated":{"line":556,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":652,"column":0},"generated":{"line":557,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":653,"column":0},"generated":{"line":558,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":654,"column":0},"generated":{"line":559,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":656,"column":0},"generated":{"line":560,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":657,"column":0},"generated":{"line":561,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":658,"column":0},"generated":{"line":562,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":659,"column":0},"generated":{"line":563,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":660,"column":0},"generated":{"line":564,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":661,"column":0},"generated":{"line":565,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":662,"column":0},"generated":{"line":566,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":663,"column":0},"generated":{"line":567,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":664,"column":0},"generated":{"line":568,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":666,"column":0},"generated":{"line":569,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":667,"column":0},"generated":{"line":570,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":668,"column":0},"generated":{"line":571,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":669,"column":0},"generated":{"line":572,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":670,"column":0},"generated":{"line":573,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":671,"column":0},"generated":{"line":574,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":672,"column":0},"generated":{"line":575,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":673,"column":0},"generated":{"line":576,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":674,"column":0},"generated":{"line":577,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":675,"column":0},"generated":{"line":578,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":676,"column":0},"generated":{"line":579,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":677,"column":0},"generated":{"line":580,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":678,"column":0},"generated":{"line":581,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":680,"column":0},"generated":{"line":582,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":681,"column":0},"generated":{"line":583,"column":0}},{"source":"lib/SpatialLayout.ts","name":null,"original":{"line":682,"column":0},"generated":{"line":584,"column":0}}],"sources":{"lib/SpatialLayout.ts":"// import * as THREE from 'three'\n// import { SpatialLayoutTransitioner } from './SpatialLayoutTransitioner'\n// import { SpatialMetrics } from './SpatialMetrics'\n// import { matrices, vectors, V_111 } from './SpatialUtils'\n\n// declare module 'three/src/core/Object3D' {\n//     interface Object3D {\n//         layout: SpatialLayout\n//         updateWorldMatrix(updateParents:boolean, updateChildren:boolean, applyLayout?:boolean) : void\n//     }\n// }\n\n// // modify updateMatrixWorld to rely on updateWorldMatrix method\n// THREE.Object3D.prototype.updateMatrixWorld = function(force) {\n//     this.updateWorldMatrix(false, true, true)\n// }\n\n// // modify Object3D.updateWorldMatrix to apply layout\n// THREE.Object3D.prototype.updateWorldMatrix = function(updateParents:boolean, updateChildren:boolean, applyLayout:boolean=updateChildren) {\n    \n//     const layout = this.layout\n\n//     if ( applyLayout ) layout.invalidateBounds()\n\n//     const parent = this.parent;\n\n//     if ( updateParents === true && parent !== null ) {\n\n//         parent.updateWorldMatrix( true, false, false );\n\n//     }\n\n//     if ( applyLayout && this.matrixAutoUpdate ) this.updateMatrix();\n\n//     if ( this.parent === null ) {\n\n//         this.matrixWorld.copy( this.matrix );\n\n//     } else {\n\n//         this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n//     }\n\n//     // update children\n\n//     if ( updateChildren === true ) {\n\n//         var children = this.children;\n\n//         for ( var i = 0, l = children.length; i < l; i ++ ) {\n\n//             children[ i ].updateWorldMatrix( false, true, applyLayout );\n\n//         }\n\n//     }\n\n//     if (!applyLayout) return\n\n//     SpatialLayout.apply(this)\n// }\n\n// // create a SpatialLayout instance on first access of the `layout` property \n// Object.defineProperty(THREE.Object3D.prototype, 'layout', {\n//     get: function getLayout(this:THREE.Object3D) {\n//         if (this === THREE.Object3D.prototype) return undefined\n//         Object.defineProperty(this, 'layout', {\n//             value: new SpatialLayout(this),\n//             writable: true,\n//             enumerable: true\n//         })\n//         return this.layout\n//     }\n// })\n\n// export const SpatialLayoutFit = {\n//     contain: 'contain',\n//     contain3d: 'contain3d',\n//     cover: 'cover',\n//     cover3d: 'cover3d',\n//     fill: 'fill',\n//     fill3d: 'fill3d',\n// }\n// export type SpatialLayoutFitType = keyof typeof SpatialLayoutFit\n\n\n// export type SpatialLayoutX = number|'center'|'left'|'right'\n// export type SpatialLayoutY = number|'center'|'top'|'bottom'\n// export type SpatialLayoutZ = number|'center'|'front'|'back'\n\n// /**\n//  * Extend THREE.Object3D functionality with 3D layout functionality.\n//  * \n//  * Features include:\n//  *  - automatic bounds computation\n//  *  - modify alignment, origin, and size with respect to bounds and parent bounds\n//  *  - pose & layout transitions\n//  */\n// export class SpatialLayout {\n\n//     /**\n//      * When active, enables pose (position, quaternion, scale) \n//      * and layout (align, origin, size) properties to be used \n//      * as transition targets for smooth linear interpolation.\n//      */\n//     transitioner : SpatialLayoutTransitioner\n\n//     /**\n//      * Force local layout bounds to be excluded from the parent bounding context \n//      * (effectively, forces a new bounding context)\n//      */\n//     forceBoundsExclusion = false\n\n//     /**\n//      * Specifies the anchor with respect to the `parentBounds`\n//      * \n//      * Parent Center is (0,0,0)\n//      * Parent Left is (-1,0,0)\n//      * Parent Top-Right is (1,1,0)\n//      * Parent Front is (0,0,1)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     align = new THREE.Vector3().set(NaN,NaN,NaN)\n\n//     /**\n//      * Specifies the anchor with respect to local `bounds`.  \n//      * \n//      * Center is (0,0,0)\n//      * Left is (-1,0,0)\n//      * Top-Right is (1,1,0)\n//      * Front-Center is (0,0,1)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     anchor = new THREE.Vector3().set(NaN,NaN,NaN)\n\n//     /**\n//      * Specifies the center of rotation/scaling with respect to local `bounds`.  \n//      * This behaves similarly to transform-origin in CSS. \n//      * \n//      * Center is (0,0,0)\n//      * Left is (-1,0,0)\n//      * Top-Right is (1,1,0)\n//      * Front-Center is (0,0,1)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     origin = new THREE.Vector3().set(NaN,NaN,NaN)\n\n//     /**\n//      * Specifies the maximum layout size with respect to `parentBounds`\n//      * \n//      * Same size as parent is (1, 1, 1)\n//      * Half size as parent is (0.5, 0.5, 0.5)\n//      * \n//      * For no-op in any dimension, NaN can be used as a value\n//      */\n//     size = new THREE.Vector3().set(NaN,NaN,NaN)\n\n//     /** \n//      * Specifies how layout should fit within the the available `size`,\n//      * with respect to the aspect ratios of local `bounds` and `parentBounds`\n//     */\n//     set fit(fit:SpatialLayoutFitType) {\n//         this._fit = fit\n//         for (const id in this.fitTargets) this.fitTargets[id as SpatialLayoutFitType] = 0\n//         this.fitTargets[fit] = 1\n//     }\n//     get fit() {\n//         return this._fit\n//     }\n//     private _fit = 'contain' as SpatialLayoutFitType\n\n//     /** Used internally. */\n//     fitTargets = {\n//         contain: 1,\n//         contain3d: 0,\n//         cover: 0,\n//         cover3d: 0,\n//         fill: 0,\n//         fill3d: 0,\n//     }\n\n//     /**\n//      * Specifies the desired parent coordinate system.\n//      * This is only useful when the transitioner is active (`update()` is being called each frame).\n//      */\n//     targetParent? : THREE.Object3D\n\n//     /**\n//      * Specifies the degree to which the layout properties (`align`, `anchor`, `origin`, and `size`) influence \n//      * the final transform. At 0, the layout properties have no effect. At 1, they have\n//      * their full intended effect. \n//      */\n//     weight = 1\n\n//     computedAlignPosition = new THREE.Vector3(0,0,0)\n//     computedAnchorPosition = new THREE.Vector3(0,0,0) \n//     computedOriginPosition = new THREE.Vector3(0,0,0) \n//     computedSizeScale = new THREE.Vector3(1,1,1)\n\n//     boundsAutoUpdate = true\n//     minBounds = new THREE.Box3\n\n//     get bounds() {\n//         if (!this.boundsAutoUpdate) return this._bounds\n//         return SpatialLayout.updateBounds(this.object)\n//     }\n\n//     get parentBounds() {\n//         return SpatialLayout.updateParentBounds(this.object)\n//     }\n\n//     private _boundsValid = false\n//     private _bounds = new THREE.Box3\n//     private _parentBounds = new THREE.Box3\n\n//     constructor(public object:THREE.Object3D) {\n//         this.transitioner =  new SpatialLayoutTransitioner(object)\n//         this._bounds.objectFilter = SpatialMetrics.objectFilter\n//         this._parentBounds.objectFilter = SpatialMetrics.objectFilter\n//         this.minBounds.min.setScalar(0)\n//         this.minBounds.max.setScalar(0)\n//     }\n\n//     invalidateBounds() {\n//         this._boundsValid = false\n//     }\n\n//     noop(){\n//         this.align.setScalar(NaN)\n//         this.anchor.setScalar(NaN)\n//         this.origin.setScalar(NaN)\n//         this.size.setScalar(NaN)\n//     }\n\n//     reset() {\n//         this.object.position.setScalar(0)\n//         this.object.quaternion.set(0,0,0,1)\n//         this.object.scale.setScalar(1)\n//         this.align.setScalar(NaN)\n//         this.anchor.setScalar(NaN)\n//         this.origin.setScalar(NaN)\n//         this.size.setScalar(NaN)\n//         this.fit = 'contain'\n//         return this\n//     }\n\n//     setTargetParent(targetParent:THREE.Object3D) {\n//         this.targetParent = targetParent\n//         return this\n//     }\n\n//     setAlign(x:SpatialLayoutX, y:SpatialLayoutY, z:SpatialLayoutZ) {\n//         SpatialLayout._setXYZ(this.align, x,y,z)\n//         return this\n//     }\n\n//     setAnchor(x:SpatialLayoutX, y:SpatialLayoutY, z:SpatialLayoutZ) {\n//         SpatialLayout._setXYZ(this.anchor, x,y,z)\n//         return this\n//     }\n\n//     setOrigin(x:SpatialLayoutX, y:SpatialLayoutY, z:SpatialLayoutZ) {\n//         SpatialLayout._setXYZ(this.origin, x,y,z)\n//         return this\n//     }\n\n//     setFit(fit:SpatialLayoutFitType) {\n//         this.fit = fit\n//         return this\n//     }\n\n//     /**\n//      * Set the `size` property. \n//      * If 'auto' is specified for a given dimension, then that dimension \n//      * will be scaled by the average resulting scale of other two dimensions. \n//      * \n//      * By specifiesing size in only one dimension, with the other two set to 'auto', \n//      * the original aspect ratio will be maintained. \n//      * \n//      * @param x \n//      * @param y \n//      * @param z \n//      */\n//     setSize(x:number, y:number, z:number) { //x:number|'auto', y:number|'auto', z:number|'auto') : this {\n//         this.size.set(x,y,z)\n\n//         // const isAutoX = x === 'auto'\n//         // const isAutoY = y === 'auto'\n//         // const isAutoZ = z === 'auto'\n//         // const autoCount = +isAutoX + +isAutoY + +isAutoZ\n\n//         // // if all dimensions are numerical, set size directly\n//         // if (autoCount === 0) {\n//         //     this.size.set(x as number, y as number, z as number)\n//         //     return this\n//         // }\n\n//         // // if all dimensions are set to `auto`, assume size to fit\n//         // if (autoCount === 3) {\n//         //     return this.setSizeToFit('contain3d')\n//         // }\n\n//         // // if any dimension is not 'auto', we need to maintain aspect ratio in that dimension\n//         // // by scaling by the average resulting scale of other specified dimensions\n\n//         // // ensure we have the right parent\n//         // this._setParent()\n\n//         // // first calculate the size scale adjustment as if NaN was passed for 'auto' \n//         // this.size.set(isAutoX ? NaN : x as number, isAutoY ? NaN : y as number,isAutoZ ? NaN : z as number)\n//         // const sizeScale = SpatialLayout.getScaleForSize(this.bounds, this.parentBounds, this.size, vectors.get())\n\n//         // // then compute the average of non-auto (non-NaN) scales\n//         // const averageSizeScale = (\n//         //     (isAutoX ? 0 : sizeScale.x) + \n//         //     (isAutoY ? 0 : sizeScale.y) + \n//         //     (isAutoZ ? 0 : sizeScale.z)\n//         // ) / (3 - autoCount) // dividend should never be 0 because of the autoCount === 3 gaurd above\n//         // sizeScale.x = isAutoX ? averageSizeScale : sizeScale.x\n//         // sizeScale.y = isAutoY ? averageSizeScale : sizeScale.y\n//         // sizeScale.z = isAutoZ ? averageSizeScale : sizeScale.z\n\n//         // // finally, convert the size scale back to a fully numerical size value\n//         // SpatialLayout.getSizeForScale(this.bounds, this.parentBounds, sizeScale, this.size)\n\n//         return this\n//     }\n\n//     // /**\n//     //  * Modify the `size` property such that it fits within the parent bounds\n//     //  * @param fit \n//     //  */\n//     // setSizeToFit(fit = 'contain' as SpatialLayoutFitType) : this {\n\n//     //     if (!SpatialLayoutFit[fit]) throw new Error(`Unknown fit type: ${fit}`)\n\n//     //     if (fit === 'fill') {\n//     //         return this.setSize(1,1,'auto')\n//     //     }\n\n//     //     if (fit === 'fill3d') {\n//     //         return this.setSize(1,1,1)\n//     //     }\n\n//     //     this._setParent()\n//     //     const parentSize = this.parentBounds.getSize(vectors.get())\n//     //     const boundsSize = this.bounds.getSize(vectors.get())\n//     //     const ratio = vectors.get().copy(boundsSize).divide(parentSize)\n\n//     //     if (fit === 'contain') {\n//     //         if (ratio.x > ratio.y) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         }\n//     //     }\n\n//     //     if (fit === 'cover') {\n//     //         if (ratio.x < ratio.y) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         }\n//     //     }\n\n//     //     if (fit === 'contain3d') {\n//     //         if (ratio.x > ratio.y && ratio.x > ratio.z) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else if (ratio.y > ratio.x && ratio.y > ratio.z) {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 'auto', 1)\n//     //         }\n//     //     }\n\n//     //     if (fit === 'cover3d') {\n//     //         if (ratio.x < ratio.y && ratio.x < ratio.z) {\n//     //             this.setSize(1, 'auto', 'auto')\n//     //         } else if (ratio.y < ratio.x && ratio.y < ratio.z) {\n//     //             this.setSize('auto', 1, 'auto')\n//     //         } else {\n//     //             this.setSize('auto', 'auto', 1)\n//     //         }\n//     //     }\n\n//     //     vectors.poolAll()\n\n//     //     return this\n//     // }\n\n//     /**\n//      * Activate the transitioner, which linearly interpolates the pose & layout of the Object3D instance.\n//      * \n//      * When the transitioner is active, the object's pose properties (`position`, `quaternion`, and `scale`)\n//      * and layout properties (`layout.align`, `layout.origin`, `layout.size`, and `layout.weight`) are treated as \n//      * transition targets (these no longer reflect the current state). As long as the transitioner is active, \n//      * the `update()` method is expected to be called each frame, and the current pose/layout state is maintained\n//      * in the transitioner instance (`layout.transitioner.position`, `layout.transitioner.align`, etc.). \n//      * \n//      * If `targetParent` is set and differs from the current `object.parent`, \n//      * this method will smoothly switch to the new coordinate system. \n//      */\n//     update(lerpFactor:number) {\n//         this.transitioner.active = true\n//         this._setParent()\n//         this.transitioner.lerp(lerpFactor)\n//     }\n\n//     /**\n//      * If true, the layout properties are effectively noop\n//      */\n//     isPassive() {\n//         return isNaN(this.align.x) && isNaN(this.align.y) && isNaN(this.align.z) &&\n//             isNaN(this.anchor.x) && isNaN(this.anchor.y) && isNaN(this.anchor.z) &&  \n//             isNaN(this.origin.x) && isNaN(this.origin.y) && isNaN(this.origin.z) &&  \n//             isNaN(this.size.x) && isNaN(this.size.y) && isNaN(this.size.z)\n//     }\n\n//     /**\n//      * If true, the `object` should not be included in the bounding calculation\n//      * for any parent layouts.\n//      */\n//     isBoundingContext() {\n//         if (this.forceBoundsExclusion) return true\n//         if (!this.isPassive()) {\n//             this.forceBoundsExclusion = true\n//             return true\n//         }\n//         return false\n//     }\n\n//     /**\n//      * Ensure that this `object` is attached to the `targetParent` Object3D instance. \n//      * When the `transitioner` is active, this method ensures a smooth transition \n//      * to another coordinate system. If the `object` is already attached to the \n//      * `targetParent`, this method is effectively noop.\n//      */\n//     private _setParent(setChildren = true) {\n//         const parent = this.targetParent\n//         const o = this.object\n//         if (!parent) return\n//         if (o.parent !== parent) {\n//             o.updateWorldMatrix(true, true)\n//             const originalMatrixWorld = matrices.get().copy(o.matrixWorld)\n//             o.parent && o.parent.remove(o)\n//             parent && parent.add(o)\n//             parent.updateWorldMatrix(true, true)\n//             const inverseParentMatrixWorld = parent ? matrices.get().getInverse(parent.matrixWorld) : matrices.get().identity()\n//             o.matrix.copy(inverseParentMatrixWorld.multiply(originalMatrixWorld))\n//             const transitioner = o.layout.transitioner\n//             if (transitioner.active) {\n//                 transitioner.layoutWeight = 0\n//                 o.matrix.decompose(transitioner.position, transitioner.quaternion, transitioner.scale)\n//                 transitioner.align.setScalar(NaN)\n//                 transitioner.anchor.setScalar(NaN)\n//                 transitioner.origin.setScalar(NaN)\n//                 transitioner.size.setScalar(NaN)\n//                 for (const i in transitioner.fitTargets) transitioner.fitTargets[i as SpatialLayoutFitType] = 0\n//                 transitioner.fitTargets.contain = 1\n//             } else {\n//                 o.matrix.decompose(o.position, o.quaternion, o.scale)\n//             }\n//             matrices.poolAll()\n//         }\n//     }\n\n//     /**\n//      * Apply the layout to matrix and matrixWorld. Used internally. \n//      */\n//     static apply(o:THREE.Object3D) {\n//         const layout = o.layout\n\n//         if (layout.isBoundingContext()) {\n\n//             const parent = o.parent\n//             const {bounds: computedBounds, parentBounds: computedParentBounds} = layout\n//             const transitionerActive = layout.transitioner.active\n//             const {position, quaternion, scale} = transitionerActive ? layout.transitioner : o\n//             const {align, anchor, origin, size} = transitionerActive ? layout.transitioner : layout\n//             const fitTargets = transitionerActive ? layout.transitioner.fitTargets : layout.fitTargets\n//             const weight = transitionerActive ? layout.transitioner.layoutWeight : layout.weight\n//             // update computed size scale\n//             const sizeScale = SpatialLayout.getScaleForSize(computedBounds, computedParentBounds, size, layout.computedSizeScale).lerp(V_111, 1-weight)\n//             SpatialLayout.adjustScaleForFit(fitTargets, sizeScale)\n//             const layoutScale = vectors.get().copy(scale).multiply(sizeScale)\n//             // update computed align & anchor positions\n//             const alignPosition = computedParentBounds.relativeToAbsolute(align, layout.computedAlignPosition)\n//             alignPosition.multiplyScalar(weight)\n//             const anchorPosition = computedBounds.relativeToAbsolute(anchor, layout.computedAnchorPosition)\n//             anchorPosition.multiply(layoutScale).multiplyScalar(weight)\n//             // apply computed align & anchor positions to local matrix\n//             const layoutPosition = vectors.get().copy(position).add(alignPosition).sub(anchorPosition)\n//             o.matrix.compose(layoutPosition, quaternion, layoutScale)\n//             // apply transform origin for rotation/scaling \n//             const originPosition = computedBounds.relativeToAbsolute(origin, layout.computedOriginPosition)\n//             if (originPosition.x !== 0 || originPosition.y !== 0 || originPosition.z !== 0) {\n//                 const scaledOriginPosition = vectors.get().copy(originPosition).multiply(layoutScale)\n//                 const originMatrix = matrices.get().setPosition(scaledOriginPosition)\n//                 o.matrix.multiplyMatrices(originMatrix, o.matrix)\n//                 originMatrix.setPosition(originPosition).getInverse(originMatrix)\n//                 o.matrix.multiplyMatrices(o.matrix, originMatrix)\n//                 matrices.pool(originMatrix)\n//             }\n//             // update matrix world\n//             parent ? o.matrixWorld.multiplyMatrices( parent.matrixWorld, o.matrix ) : o.matrixWorld.copy(o.matrix)\n//             // update child world positions without recalculating layout\n//             const children = o.children\n//             for ( var i = 0, l = o.children.length; i < l; i ++ ) {\n//                 children[ i ].updateWorldMatrix( false, true, false )\n//             }\n//             vectors.poolAll()\n\n//         } else {\n\n//             layout.computedAlignPosition.setScalar(0)\n//             layout.computedAnchorPosition.setScalar(0)\n//             layout.computedOriginPosition.setScalar(0)\n//             layout.computedSizeScale.setScalar(1)\n\n//         }\n//     }\n\n//     private static _setXYZ(vector:THREE.Vector3, x:SpatialLayoutX,y:SpatialLayoutY,z:SpatialLayoutZ) {\n//         if (typeof x === 'string') {\n//             if (x === 'left') x = -1\n//             if (x === 'center') x = 0\n//             if (x === 'right') x = 1\n//         }\n//         if (typeof y === 'string') {\n//             if (y === 'bottom') y = -1\n//             if (y === 'center') y = 0\n//             if (y === 'top') y = 1\n//         }\n//         if (typeof z === 'string') {\n//             if (z === 'back') z = -1\n//             if (z === 'center') z = 0\n//             if (z === 'front') z = 1\n//         }\n//         vector.set(x,y,z)\n//     }\n\n//     public static updateBounds(o:THREE.Object3D) {\n//         const layout = o.layout\n//         const bounds = layout._bounds\n//         if (layout._boundsValid) return bounds\n//         layout._boundsValid = true\n//         const {minBounds} = layout.transitioner.active ? layout.transitioner : layout\n//         return SpatialMetrics.get(o).getBoundsOf(o, bounds).union(minBounds)\n//     }\n    \n//     public static updateParentBounds(o:THREE.Object3D) {\n//         const layout = o.layout\n//         const parentBounds = layout._parentBounds\n//         const parent = o.parent\n//         const cameraParent = parent as THREE.Camera\n//         if (cameraParent && cameraParent.isCamera) {\n//             const positionZ = layout.transitioner.active ? layout.transitioner.position.z : o.position.z \n//             const projectionMatrixInverse = matrices.get().getInverse(cameraParent.projectionMatrix)\n//             const near = parentBounds.min.set(0,0,-1).applyMatrix4(projectionMatrixInverse).z\n//             const far = parentBounds.min.set(0,0,1).applyMatrix4(projectionMatrixInverse).z\n//             const projectionZ = parentBounds.min.set(0,0,positionZ).applyMatrix4(cameraParent.projectionMatrix).z\n//             parentBounds.min.set(-1, -1, projectionZ)\n//             parentBounds.max.set(1, 1, projectionZ)\n//             parentBounds.min.applyMatrix4(projectionMatrixInverse)\n//             parentBounds.max.applyMatrix4(projectionMatrixInverse)\n//             parentBounds.min.z = far\n//             parentBounds.max.z = near\n//             matrices.pool(projectionMatrixInverse)\n//         } else if (parent) {\n//             parentBounds.copy(parent.layout.bounds)\n//         } else {\n//             parentBounds.makeEmpty()\n//         }\n//         return parentBounds\n//     }\n\n//     private static _boundsSize = new THREE.Vector3\n//     private static _parentSize = new THREE.Vector3\n\n//     public static getScaleForSize(bounds:THREE.Box3, parentBounds:THREE.Box3, size:THREE.Vector3, out:THREE.Vector3) {\n//         const boundsSize = bounds.getSize(this._boundsSize)\n//         const parentSize = parentBounds.getSize(this._parentSize)\n//         out.copy(parentSize).multiply(size).divide(boundsSize)\n//         // if 0, set scale very close to 0 so matrix transforms remain valid\n//         if (out.x === 0) out.x = 1e-10\n//         if (out.y === 0) out.y = 1e-10\n//         if (out.z === 0) out.z = 1e-10\n//         // if any dimenion is not defined, set it close to 0\n//         if (!isFinite(out.x)) out.x = 1e-10\n//         if (!isFinite(out.y)) out.y = 1e-10\n//         if (!isFinite(out.z)) out.z = 1e-10\n//         // if any size dimension was NaN, leave it unscaled (set to 1)\n//         if (isNaN(size.x)) out.x = 1\n//         if (isNaN(size.y)) out.y = 1\n//         if (isNaN(size.z)) out.z = 1\n//         return out\n//     }\n\n//     public static getSizeForScale(bounds:THREE.Box3, parentBounds:THREE.Box3, scale:THREE.Vector3, out:THREE.Vector3) {\n//         const boundsSize = bounds.getSize(this._boundsSize)\n//         const parentSize = parentBounds.getSize(this._parentSize)\n//         out.copy(scale).multiply(boundsSize).divide(parentSize)\n//         // if 0, set scale very close to 0 so matrix transforms remain valid\n//         if (out.x === 0) out.x = 1e-10\n//         if (out.y === 0) out.y = 1e-10\n//         if (out.z === 0) out.z = 1e-10\n//         // if any dimenion is not defined, set it close to 0\n//         if (!isFinite(out.x)) out.x = 1e-10\n//         if (!isFinite(out.y)) out.y = 1e-10\n//         if (!isFinite(out.z)) out.z = 1e-10\n//         return out\n//     }\n\n//     public static _fitScale = new THREE.Vector3\n//     public static adjustScaleForFit(fitTargets:typeof SpatialLayout.prototype.fitTargets, sizeScale:THREE.Vector3) {\n//         const {x,y,z} = sizeScale\n//         const fitScale = this._fitScale\n\n//         // fill3d: allow all dimensions to fill layout size\n//         if (fitTargets.fill3d) {\n//             // no-op\n//         }\n\n//         // fill (2D): set z to average of x and y\n//         if (fitTargets.fill) {\n//             fitScale.set(x, y, x + y / 2)\n//             sizeScale.lerp(fitScale, fitTargets.fill)\n//         }\n\n//         // contain (2D): set all dimensions to smallest of x or y\n//         if (fitTargets.contain) {\n//             if (x < y) {\n//                 fitScale.set(x, x, x)\n//             } else {\n//                 fitScale.set(y, y, y)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.contain)\n//         }\n\n//         // contain3d: set all dimensions to smallest of x or y or z\n//         if (fitTargets.contain3d) {\n//             if (x < y && x < z) {\n//                 fitScale.set(x, x, x)\n//             } else if (y < x && y < z) {\n//                 fitScale.set(y, y, y)\n//             } else {\n//                 fitScale.set(z, z, z)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.contain3d)\n//         }\n\n//         // cover (2D): set all dimensions to largest of x or y\n//         if (fitTargets.cover) {\n//             if (x > y) {\n//                 fitScale.set(x, x, x)\n//             } else {\n//                 fitScale.set(y, y, y)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.cover)\n//         }\n\n//         // cover (3D): set all dimensions to largest of x or y or z\n//         if (fitTargets.cover3d) {\n//             if (x > y && x > z) {\n//                 fitScale.set(x, x, x)\n//             } else if (y > x && y > z) {\n//                 fitScale.set(y, y, y)\n//             } else {\n//                 fitScale.set(z, z, z)\n//             }\n//             sizeScale.lerp(fitScale, fitTargets.cover3d)\n//         }\n//     }\n// }\n\n// function isNaN(a:number) {\n//     return a !== a\n// }"},"lineCount":null}},"error":null,"hash":"6348456adab40cbf8e772b0dbb74188d","cacheData":{"env":{}}}